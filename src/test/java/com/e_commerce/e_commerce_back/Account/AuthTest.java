package com.e_commerce.e_commerce_back.Account;

import java.time.LocalDate;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Order;
import org.junit.jupiter.api.TestMethodOrder;
import org.junit.jupiter.api.MethodOrderer;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.boot.test.context.SpringBootTest;
import org.springframework.test.context.ActiveProfiles;

import com.e_commerce.e_commerce_back.dto.ActivateAccountDTO;
import com.e_commerce.e_commerce_back.dto.AuthResponseDTO;
import com.e_commerce.e_commerce_back.dto.LoginDTO;
import com.e_commerce.e_commerce_back.dto.RegisterUserDTO;
import com.e_commerce.e_commerce_back.dto.TokenValidationDTO;
import com.e_commerce.e_commerce_back.dto.UserInfoDTO;
import com.e_commerce.e_commerce_back.services.implementation.AuthServiceImpl;
import com.e_commerce.e_commerce_back.services.interfaces.EmailService;
import com.e_commerce.e_commerce_back.security.JwtUtil;

@SpringBootTest
@ActiveProfiles("test")
@TestMethodOrder(MethodOrderer.OrderAnnotation.class)
public class AuthTest {
    
    @Autowired
    AuthServiceImpl authService;
    
    @Autowired
    EmailService emailServiceImpl;

    @Autowired
    JwtUtil jwtUtil;

    // Variables est√°ticas para compartir datos entre tests
    private static String SAVED_ACCESS_TOKEN = "";
    private static final String TEST_EMAIL = "brandonmontealegre15@gmail.com";

    @Test
    @Order(1)
    public void testRegisterUser() {
        try {
            RegisterUserDTO registerUserDTO = new RegisterUserDTO(
                "1001277430",
                "Brandon",
                "Test",
                TEST_EMAIL,
                "3153033412",
                "M@mahermosa123",
                LocalDate.of(2000, 8, 17),
                true
            );

            System.out.println("üöÄ Test 1: Registrando usuario...");
            AuthResponseDTO response = authService.register(registerUserDTO);
            
            System.out.println("‚úÖ " + response.getMessage());
            System.out.println("üìß Revisa tu email: " + TEST_EMAIL);
            System.out.println("üîç Busca: 'C√≥digo de Activaci√≥n - E-Commerce Store'");
            
            Thread.sleep(3000);
            System.out.println("‚ú® Registro completado!\n");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en registro: " + e.getMessage());
            e.printStackTrace();
        }
    }

    @Test
    @Order(2)
    public void testActivateAccount() {
        try {
            // IMPORTANTE: Cambia este c√≥digo por el que recibas en el email
            String activationCode = "902195"; // <- Actualiza este valor
            
            ActivateAccountDTO activateAccountDTO = new ActivateAccountDTO(
                activationCode
            );
            
            System.out.println("üîê Test 2: Activando cuenta con c√≥digo: " + activationCode);
            AuthResponseDTO response = authService.activateAccount(activateAccountDTO);
            
            System.out.println("‚úÖ " + response.getMessage());
            System.out.println("‚ú® Activaci√≥n completada!\n");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en activaci√≥n: " + e.getMessage());
            System.err.println("üí° Aseg√∫rate de usar el c√≥digo correcto del email");
        }
    }

    @Test
    @Order(3)
    public void testLogin() {
        try {
            LoginDTO loginDTO = new LoginDTO(
                "brandonmontealegre15@gmail.com",
                "M@mahermosa123"
            );
            
            System.out.println("üîë Test 3: Iniciando sesi√≥n...");
            AuthResponseDTO response = authService.login(loginDTO);
            
            System.out.println("‚úÖ " + response.getMessage());
            
            // Guardar token para otros tests
            if (response.getAccessToken() != null) {
                SAVED_ACCESS_TOKEN = response.getAccessToken();
                System.out.println("üé´ Token guardado para siguientes tests");
                System.out.println("üìÑ Token: " + SAVED_ACCESS_TOKEN.substring(0, 30) + "...");
            }
            
            System.out.println("‚ú® Login completado!\n");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en login: " + e.getMessage());
            System.err.println("üí° Aseg√∫rate de que la cuenta est√© activada");
        }
    }

    @Test
    @Order(4)
    public void testValidateToken() {
        try {
            if (SAVED_ACCESS_TOKEN.isEmpty()) {
                System.out.println("‚ö†Ô∏è No hay token guardado, ejecuta testLogin primero");
                return;
            }
            
            System.out.println("üîç Test 4: Validando token...");
            TokenValidationDTO response = authService.validateToken(SAVED_ACCESS_TOKEN);
            
            System.out.println("‚úÖ Token v√°lido: " + response.isValid());
            System.out.println("üìß Usuario: " + response.getUsername());
            System.out.println("‚ú® Validaci√≥n completada!\n");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error validando token: " + e.getMessage());
        }
    }

    @Test
    @Order(5)
    public void testGetCurrentUserInfo() {
        try {
            System.out.println("üë§ Test 5: Obteniendo info del usuario actual...");
            
            // Nota: Este test podr√≠a requerir autenticaci√≥n en el contexto
            UserInfoDTO response = authService.getCurrentUserInfo();
            
            System.out.println("‚úÖ Usuario: " + response.getName() + " " + response.getLastName());
            System.out.println("üìß Email: " + response.getEmail());
            System.out.println("‚ú® Info obtenida!\n");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error obteniendo info: " + e.getMessage());
            System.err.println("üí° Este m√©todo podr√≠a requerir contexto de seguridad");
        }
    }

    @Test
    @Order(6)
    public void testLogout() {
        try {
            if (SAVED_ACCESS_TOKEN.isEmpty()) {
                System.out.println("‚ö†Ô∏è No hay token guardado, ejecuta testLogin primero");
                return;
            }
            
            System.out.println("üö™ Test 6: Cerrando sesi√≥n...");
            String authHeader = "Bearer " + SAVED_ACCESS_TOKEN;
            
            authService.logout(authHeader);
            System.out.println("‚úÖ Logout exitoso!");
            
            // Verificar que el token ya no es v√°lido
            System.out.println("üîç Verificando invalidaci√≥n del token...");
            try {
                String username = jwtUtil.extractUsername(SAVED_ACCESS_TOKEN);
                System.out.println("‚ö†Ô∏è Token a√∫n v√°lido para: " + username);
            } catch (Exception e) {
                System.out.println("‚úÖ Token correctamente invalidado");
            }
            
            System.out.println("‚ú® Logout completado!\n");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en logout: " + e.getMessage());
        }
    }

    // ========================================
    // TESTS ADICIONALES PARA CASOS EDGE
    // ========================================

    @Test
    public void testLogoutWithInvalidToken() {
        try {
            System.out.println("üß™ Test Extra: Logout con token inv√°lido...");
            
            authService.logout("Bearer token.falso.123");
            System.out.println("‚úÖ Logout con token inv√°lido manejado correctamente");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error: " + e.getMessage());
        }
    }

    @Test
    public void testLogoutWithoutToken() {
        try {
            System.out.println("üß™ Test Extra: Logout sin token...");
            
            authService.logout(null);
            System.out.println("‚úÖ Logout sin token manejado correctamente");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error: " + e.getMessage());
        }
    }

    // ========================================
    // TEST COMPLETO (EL QUE YA TEN√çAS)
    // ========================================

    @Test
    public void testCompleteFlow() {
        try {
            System.out.println("\n" + "=".repeat(50));
            System.out.println("üéØ TEST COMPLETO - FLUJO COMPLETO DE AUTENTICACI√ìN");
            System.out.println("=".repeat(50));
            
            // Este es tu test original - mantenerlo como respaldo
            RegisterUserDTO registerUserDTO = new RegisterUserDTO(
                "1001277999", // documento diferente
                "Test",
                "Complete",
                "brandonmontealegre15@gmail.com",
                "3153033412",
                "M@mahermosa123",
                LocalDate.of(2000, 8, 17),
                true
            );
            
            System.out.println("üöÄ Paso 1: Registro...");
            authService.register(registerUserDTO);
            System.out.println("‚úÖ Registrado");

            System.out.println("üîê Paso 2: Activaci√≥n (usa c√≥digo real)...");
            ActivateAccountDTO activateDTO = new ActivateAccountDTO(
                "123456" // <- C√≥digo del email
            );
            
            try {
                authService.activateAccount(activateDTO);
                System.out.println("‚úÖ Activado");
            } catch (Exception e) {
                System.out.println("‚ö†Ô∏è Error activando: " + e.getMessage());
                return;
            }

            System.out.println("üîë Paso 3: Login...");
            LoginDTO loginDTO = new LoginDTO("brandonmontealegre15@gmail.com", "M@mahermosa123");
            AuthResponseDTO loginResponse = authService.login(loginDTO);
            String accessToken = loginResponse.getAccessToken();
            System.out.println("‚úÖ Login exitoso");

            System.out.println("üö™ Paso 4: Logout...");
            authService.logout("Bearer " + accessToken);
            System.out.println("‚úÖ Logout exitoso");

            System.out.println("\nüéâ FLUJO COMPLETO EXITOSO!");
            
        } catch (Exception e) {
            System.err.println("‚ùå Error en flujo completo: " + e.getMessage());
        }
    }
}